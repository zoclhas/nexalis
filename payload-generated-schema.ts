/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from "@payloadcms/db-sqlite/drizzle/sqlite-core";
import { sql, relations } from "@payloadcms/db-sqlite/drizzle";

export const product_info = sqliteTable(
  "product_info",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    description: text("description").notNull(),
  },
  (columns) => ({
    _orderIdx: index("product_info_order_idx").on(columns._order),
    _parentIDIdx: index("product_info_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product.id],
      name: "product_info_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product = sqliteTable(
  "product",
  {
    id: integer("id").primaryKey(),
    image: integer("image_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    title: text("title").notNull(),
    alt: text("alt").notNull(),
    description: text("description", { mode: "json" }).notNull(),
    slug: text("slug"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    product_image_idx: index("product_image_idx").on(columns.image),
    product_updated_at_idx: index("product_updated_at_idx").on(
      columns.updatedAt,
    ),
    product_created_at_idx: index("product_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const service_info = sqliteTable(
  "service_info",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    description: text("description").notNull(),
  },
  (columns) => ({
    _orderIdx: index("service_info_order_idx").on(columns._order),
    _parentIDIdx: index("service_info_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service.id],
      name: "service_info_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service = sqliteTable(
  "service",
  {
    id: integer("id").primaryKey(),
    image: integer("image_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    title: text("title").notNull(),
    alt: text("alt").notNull(),
    description: text("description", { mode: "json" }).notNull(),
    slug: text("slug"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    service_image_idx: index("service_image_idx").on(columns.image),
    service_updated_at_idx: index("service_updated_at_idx").on(
      columns.updatedAt,
    ),
    service_created_at_idx: index("service_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const media = sqliteTable(
  "media",
  {
    id: integer("id").primaryKey(),
    alt: text("alt").notNull(),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    url: text("url"),
    thumbnailURL: text("thumbnail_u_r_l"),
    filename: text("filename"),
    mimeType: text("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const users = sqliteTable(
  "users",
  {
    id: integer("id").primaryKey(),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text("email").notNull(),
    resetPasswordToken: text("reset_password_token"),
    resetPasswordExpiration: text("reset_password_expiration").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text("salt"),
    hash: text("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: text("lock_until").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const payload_locked_documents = sqliteTable(
  "payload_locked_documents",
  {
    id: integer("id").primaryKey(),
    globalSlug: text("global_slug"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = sqliteTable(
  "payload_locked_documents_rels",
  {
    id: integer("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: text("path").notNull(),
    productID: integer("product_id"),
    serviceID: integer("service_id"),
    mediaID: integer("media_id"),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_product_id_idx: index(
      "payload_locked_documents_rels_product_id_idx",
    ).on(columns.productID),
    payload_locked_documents_rels_service_id_idx: index(
      "payload_locked_documents_rels_service_id_idx",
    ).on(columns.serviceID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    productIdFk: foreignKey({
      columns: [columns["productID"]],
      foreignColumns: [product.id],
      name: "payload_locked_documents_rels_product_fk",
    }).onDelete("cascade"),
    serviceIdFk: foreignKey({
      columns: [columns["serviceID"]],
      foreignColumns: [service.id],
      name: "payload_locked_documents_rels_service_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = sqliteTable(
  "payload_preferences",
  {
    id: integer("id").primaryKey(),
    key: text("key"),
    value: text("value", { mode: "json" }),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = sqliteTable(
  "payload_preferences_rels",
  {
    id: integer("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: text("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = sqliteTable(
  "payload_migrations",
  {
    id: integer("id").primaryKey(),
    name: text("name"),
    batch: numeric("batch"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const partners_partners = sqliteTable(
  "partners_partners",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: text("id").primaryKey(),
    logo: integer("logo_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    partner: text("partner").notNull(),
  },
  (columns) => ({
    _orderIdx: index("partners_partners_order_idx").on(columns._order),
    _parentIDIdx: index("partners_partners_parent_id_idx").on(
      columns._parentID,
    ),
    partners_partners_logo_idx: index("partners_partners_logo_idx").on(
      columns.logo,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [partners.id],
      name: "partners_partners_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const partners = sqliteTable("partners", {
  id: integer("id").primaryKey(),
  updatedAt: text("updated_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
  createdAt: text("created_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
});

export const clients_clients = sqliteTable(
  "clients_clients",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: text("id").primaryKey(),
    logo: integer("logo_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    client: text("client").notNull(),
  },
  (columns) => ({
    _orderIdx: index("clients_clients_order_idx").on(columns._order),
    _parentIDIdx: index("clients_clients_parent_id_idx").on(columns._parentID),
    clients_clients_logo_idx: index("clients_clients_logo_idx").on(
      columns.logo,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [clients.id],
      name: "clients_clients_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const clients = sqliteTable("clients", {
  id: integer("id").primaryKey(),
  updatedAt: text("updated_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
  createdAt: text("created_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
});

export const projects_projects = sqliteTable(
  "projects_projects",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
  },
  (columns) => ({
    _orderIdx: index("projects_projects_order_idx").on(columns._order),
    _parentIDIdx: index("projects_projects_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [projects.id],
      name: "projects_projects_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const projects = sqliteTable("projects", {
  id: integer("id").primaryKey(),
  updatedAt: text("updated_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
  createdAt: text("created_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
});

export const relations_product_info = relations(product_info, ({ one }) => ({
  _parentID: one(product, {
    fields: [product_info._parentID],
    references: [product.id],
    relationName: "info",
  }),
}));
export const relations_product = relations(product, ({ one, many }) => ({
  image: one(media, {
    fields: [product.image],
    references: [media.id],
    relationName: "image",
  }),
  info: many(product_info, {
    relationName: "info",
  }),
}));
export const relations_service_info = relations(service_info, ({ one }) => ({
  _parentID: one(service, {
    fields: [service_info._parentID],
    references: [service.id],
    relationName: "info",
  }),
}));
export const relations_service = relations(service, ({ one, many }) => ({
  image: one(media, {
    fields: [service.image],
    references: [media.id],
    relationName: "image",
  }),
  info: many(service_info, {
    relationName: "info",
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_users = relations(users, () => ({}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    productID: one(product, {
      fields: [payload_locked_documents_rels.productID],
      references: [product.id],
      relationName: "product",
    }),
    serviceID: one(service, {
      fields: [payload_locked_documents_rels.serviceID],
      references: [service.id],
      relationName: "service",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);
export const relations_partners_partners = relations(
  partners_partners,
  ({ one }) => ({
    _parentID: one(partners, {
      fields: [partners_partners._parentID],
      references: [partners.id],
      relationName: "partners",
    }),
    logo: one(media, {
      fields: [partners_partners.logo],
      references: [media.id],
      relationName: "logo",
    }),
  }),
);
export const relations_partners = relations(partners, ({ many }) => ({
  partners: many(partners_partners, {
    relationName: "partners",
  }),
}));
export const relations_clients_clients = relations(
  clients_clients,
  ({ one }) => ({
    _parentID: one(clients, {
      fields: [clients_clients._parentID],
      references: [clients.id],
      relationName: "clients",
    }),
    logo: one(media, {
      fields: [clients_clients.logo],
      references: [media.id],
      relationName: "logo",
    }),
  }),
);
export const relations_clients = relations(clients, ({ many }) => ({
  clients: many(clients_clients, {
    relationName: "clients",
  }),
}));
export const relations_projects_projects = relations(
  projects_projects,
  ({ one }) => ({
    _parentID: one(projects, {
      fields: [projects_projects._parentID],
      references: [projects.id],
      relationName: "projects",
    }),
  }),
);
export const relations_projects = relations(projects, ({ many }) => ({
  projects: many(projects_projects, {
    relationName: "projects",
  }),
}));

type DatabaseSchema = {
  product_info: typeof product_info;
  product: typeof product;
  service_info: typeof service_info;
  service: typeof service;
  media: typeof media;
  users: typeof users;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  partners_partners: typeof partners_partners;
  partners: typeof partners;
  clients_clients: typeof clients_clients;
  clients: typeof clients;
  projects_projects: typeof projects_projects;
  projects: typeof projects;
  relations_product_info: typeof relations_product_info;
  relations_product: typeof relations_product;
  relations_service_info: typeof relations_service_info;
  relations_service: typeof relations_service;
  relations_media: typeof relations_media;
  relations_users: typeof relations_users;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_partners_partners: typeof relations_partners_partners;
  relations_partners: typeof relations_partners;
  relations_clients_clients: typeof relations_clients_clients;
  relations_clients: typeof relations_clients;
  relations_projects_projects: typeof relations_projects_projects;
  relations_projects: typeof relations_projects;
};

declare module "@payloadcms/db-sqlite/types" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
